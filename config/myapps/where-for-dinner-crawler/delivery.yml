apiVersion: apps/v1
kind: Deployment
metadata:
  name: where-for-dinner-crawler
  annotations:
    kapp.k14s.io/update-strategy: fallback-on-replace
    ootb.apps.tanzu.vmware.com/servicebinding-workload: "true"
  labels:
    app.kubernetes.io/part-of: where-for-dinner-crawler
    apps.tanzu.vmware.com/auto-configure-actuators: "true"
    apps.tanzu.vmware.com/has-tests: "true"
    apps.tanzu.vmware.com/workload-type: server
    networking.knative.dev/visibility: cluster-local
    app.kubernetes.io/component: run
    carto.run/workload-name: where-for-dinner-crawler
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: run
      app.kubernetes.io/part-of: where-for-dinner-crawler
      apps.tanzu.vmware.com/auto-configure-actuators: "true"
      apps.tanzu.vmware.com/has-tests: "true"
      apps.tanzu.vmware.com/workload-type: server
      carto.run/workload-name: where-for-dinner-crawler
      conventions.carto.run/framework: spring-boot
      networking.knative.dev/visibility: cluster-local
  template:
    metadata:
      annotations:
        boot.spring.io/version: 2.7.5
        conventions.carto.run/applied-conventions: |-
          spring-boot-convention/auto-configure-actuators-check
          spring-boot-convention/spring-boot
          spring-boot-convention/spring-boot-web
          spring-boot-convention/app-live-view-appflavour-check
          appliveview-sample/app-live-view-appflavour-check
        developer.conventions/target-containers: workload
        kubectl.kubernetes.io/last-applied-configuration: |
          {"apiVersion":"carto.run/v1alpha1","kind":"Workload","metadata":{"annotations":{},"labels":{"app.kubernetes.io/part-of":"where-for-dinner-crawler","apps.tanzu.vmware.com/auto-configure-actuators":"true","apps.tanzu.vmware.com/has-tests":"true","apps.tanzu.vmware.com/workload-type":"server","networking.knative.dev/visibility":"cluster-local"},"name":"where-for-dinner-crawler","namespace":"myapps"},"spec":{"params":[{"name":"ports","value":[{"containerPort":8080,"name":"http","port":80}]}],"resources":{"limits":{"cpu":"2000m","memory":"3.0G"},"requests":{"cpu":"100m","memory":"250M"}},"source":{"git":{"ref":{"branch":"tap-1.4.x"},"url":"https://github.com/vmware-tanzu/application-accelerator-samples.git"},"subPath":"where-for-dinner/where-for-dinner-crawler"}}}
      labels:
        app.kubernetes.io/component: run
        app.kubernetes.io/part-of: where-for-dinner-crawler
        apps.tanzu.vmware.com/auto-configure-actuators: "true"
        apps.tanzu.vmware.com/has-tests: "true"
        apps.tanzu.vmware.com/workload-type: server
        carto.run/workload-name: where-for-dinner-crawler
        conventions.carto.run/framework: spring-boot
        networking.knative.dev/visibility: cluster-local
    spec:
      containers:
      - env:
        - name: JAVA_TOOL_OPTIONS
          value: -Dserver.port="8080"
        image: harbor.rito.tkg-vsp-lab.hyrulelab.com/tap/workloads/where-for-dinner-crawler-myapps@sha256:d91896c1187869118d473fdd9b38b0e04da5c775cc3f69e320b5bd00cc5e8ef6
        name: workload
        ports:
        - containerPort: 8080
          protocol: TCP
        resources:
          limits:
            cpu: "2"
            memory: 3G
          requests:
            cpu: 100m
            memory: 250M
        securityContext:
          runAsUser: 1000
      serviceAccountName: default
---
apiVersion: v1
kind: Service
metadata:
  name: where-for-dinner-crawler
  labels:
    app.kubernetes.io/part-of: where-for-dinner-crawler
    apps.tanzu.vmware.com/auto-configure-actuators: "true"
    apps.tanzu.vmware.com/has-tests: "true"
    apps.tanzu.vmware.com/workload-type: server
    networking.knative.dev/visibility: cluster-local
    app.kubernetes.io/component: run
    carto.run/workload-name: where-for-dinner-crawler
spec:
  selector:
    app.kubernetes.io/component: run
    app.kubernetes.io/part-of: where-for-dinner-crawler
    apps.tanzu.vmware.com/auto-configure-actuators: "true"
    apps.tanzu.vmware.com/has-tests: "true"
    apps.tanzu.vmware.com/workload-type: server
    carto.run/workload-name: where-for-dinner-crawler
    conventions.carto.run/framework: spring-boot
    networking.knative.dev/visibility: cluster-local
  ports:
  - targetPort: 8080
    port: 8080
    name: "8080"
  - targetPort: 8080
    port: 80
    name: http

